/*******************************************************************************
//
//  SYCL 2020 Conformance Test Suite
//
//  Copyright (c) 2023 The Khronos Group Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
*******************************************************************************/

#include "../common/disabled_for_test_case.h"

// clang-format off
#cmakedefine CTS_TYPE @CTS_TYPE@
#cmakedefine CTS_TYPE_NAME std::string("@CTS_TYPE_NAME@")
// clang-format on

#if !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP
#include "group_scan.h"

using TestType = unnamed_type_pack<CTS_TYPE>;
using ScanTypes = Types;

static const auto Dims = integer_pack<1, 2, 3>::generate_unnamed();
#endif  // !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP

// FIXME: known_identity is not impemented yet for AdaptiveCpp.
DISABLED_FOR_TEST_CASE(AdaptiveCpp)
(CTS_TYPE_NAME + " group and sub-group joint scan functions",
 "[group_func][type_list][dim]")({
#if defined(SYCL_CTS_COMPILING_WITH_ADAPTIVECPP)
  WARN(
      "AdaptiveCpp cannot handle cases of different types for InPtr and OutPtr. "
      "Skipping such test cases.");
  WARN(
      "AdaptiveCpp joint_exclusive_scan and joint_inclusive_scan cannot process "
      "over several sub-groups simultaneously. Using one sub-group only.");
  WARN("AdaptiveCpp does not support sycl::known_identity_v yet.");
#endif

  auto queue = once_per_unit::get_queue();
  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

  // FIXME: AdaptiveCpp cannot handle cases of different types
#if defined(SYCL_CTS_COMPILING_WITH_ADAPTIVECPP)
  for_all_combinations<invoke_joint_scan_group_same_type>(Dims, TestType{},
                                                          queue);
#else
  for_all_combinations<invoke_joint_scan_group>(Dims, TestType{}, ScanTypes{},
                                                queue);
#endif
});

// FIXME: known_identity is not impemented yet for AdaptiveCpp.
DISABLED_FOR_TEST_CASE(AdaptiveCpp)
(CTS_TYPE_NAME + " group and sub-group joint scan functions with init",
 "[group_func][type_list][dim]")({
#if defined(SYCL_CTS_COMPILING_WITH_ADAPTIVECPP)
  WARN(
      "AdaptiveCpp cannot handle cases of different types for T, *InPtr and "
      "*OutPtr. Skipping such test cases.");
  WARN(
      "AdaptiveCpp joint_exclusive_scan and joint_inclusive_scan with init values "
      "cannot process over several sub-groups simultaneously. Using one "
      "sub-group only.");
#endif

  auto queue = once_per_unit::get_queue();
  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

  // FIXME: AdaptiveCpp cannot handle cases of different types
#if defined(SYCL_CTS_COMPILING_WITH_ADAPTIVECPP)
  for_all_combinations<invoke_init_joint_scan_group_same_type>(Dims, TestType{},
                                                               queue);
#else
  for_all_combinations<invoke_init_joint_scan_group>(
      Dims, TestType{}, ScanTypes{}, ScanTypes{}, queue);
#endif
});
