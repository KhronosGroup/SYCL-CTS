/*******************************************************************************
//
//  SYCL 2020 Conformance Test Suite
//
//  Copyright (c) 2024 The Khronos Group Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
*******************************************************************************/

// clang-format off
#cmakedefine CTS_TYPE @CTS_TYPE@
#cmakedefine CTS_TYPE_NAME std::string("@CTS_TYPE_NAME@")
// clang-format on

#if !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP
#include "group_scan.h"

namespace non_uniform_groups::tests {

using CurrentType = unnamed_type_pack<CTS_TYPE>;
using ScanTypes = Types;
#endif  // !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP

TEMPLATE_LIST_TEST_CASE(
          CTS_TYPE_NAME + " non-uniform group joint scan functions",
          "[oneapi_non_uniform_groups][group_func][type_list]", GroupPackTypes){
  auto queue = once_per_unit::get_queue();

  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

  for_all_combinations<invoke_joint_scan_group>(TestType{}, CurrentType{},
                                                ScanTypes{}, queue);
};

TEMPLATE_LIST_TEST_CASE(
          CTS_TYPE_NAME + " non-uniform group joint scan functions with init",
          "[oneapi_non_uniform_groups][group_func][type_list]", GroupPackTypes){
  auto queue = once_per_unit::get_queue();

  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

  for_all_combinations<invoke_init_joint_scan_group>(
      TestType{}, CurrentType{}, ScanTypes{}, ScanTypes{}, queue);
};

}  // namespace non_uniform_groups::tests
