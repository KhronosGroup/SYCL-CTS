/*************************************************************************
//
//  SYCL Conformance Test Suite
//
//  Copyright (c) 2017-2022 Codeplay Software LTD. All Rights Reserved.
//  Copyright (c) 2022 The Khronos Group Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
**************************************************************************/

#define SYCL_SIMPLE_SWIZZLES

#include "../common/common.h"
#include "../common/common_vec.h"

#define TEST_NAME vector_swizzles_$TYPE_NAME

namespace vector_swizzles_$TYPE_NAME__ {
using namespace sycl_cts;

/** Test each combination of vector swizzles can be generated
 *  and used like a normal vector
 */
class TEST_NAME : public util::test_base {
 public:
  /** return information about this test
   */
  void get_info(test_base::info &out) const override {
    set_test_info(out, TOSTRING(TEST_NAME), TEST_FILE);
  }

  /** execute the test
   */
  void run(util::logger &log) override {
    try {
      auto testQueue = util::get_cts_object::queue();
      {
        auto testDevice = testQueue.get_device();

        /** Test vector swizzles
         */
        // 1 dimensional swizzles
        $1D_SWIZZLES

        // 2 dimensional swizzles
        $2D_SWIZZLES

        // 3 dimensional swizzles
        $3D_SWIZZLES

        // 4 dimensional swizzles
        $4D_SWIZZLES

        // 8 dimensional swizzles
        $8D_SWIZZLES

        // 16 dimensional swizzles
        $16D_SWIZZLES
      }

      testQueue.wait_and_throw();
    } catch (const cl::sycl::exception &e) {
      log_exception(log, e);
      cl::sycl::string_class errorMsg =
          "a SYCL exception was caught: " + cl::sycl::string_class(e.what());
      FAIL(log, errorMsg.c_str());
    }
  }
};

util::test_proxy<TEST_NAME> proxy;

} /* namespace vector_swizzles_$TYPE_NAME__ */
