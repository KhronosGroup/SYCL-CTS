/*******************************************************************************
//
//  SYCL 2020 Conformance Test Suite
//
//  Provides tests for host_accessor properties with generic types
//
*******************************************************************************/

#include "../common/common.h"

// clang-format off
#cmakedefine CTS_TYPE @CTS_TYPE@
#cmakedefine CTS_TYPE_NAME std::string("@CTS_TYPE_NAME@")
// clang-format on

// FIXME: re-enable when sycl::host_accessor is implemented
#if !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP
#include "../accessor_basic/accessor_common.h"
#include "host_accessor_properties.h"

using namespace host_accessor_properties;
#endif

#include "../common/disabled_for_test_case.h"
#include "catch2/catch_test_macros.hpp"

namespace host_accessor_properties_core {

DISABLED_FOR_TEMPLATE_LIST_TEST_CASE(AdaptiveCpp)
(CTS_TYPE_NAME + " sycl::host_accessor properties.", "[accessor]", test_combinations)({
  auto queue = sycl_cts::util::get_cts_object::queue();
  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

#if SYCL_CTS_ENABLE_FULL_CONFORMANCE
  if constexpr (std::is_same_v<CTS_TYPE, user_struct>)
    run_host_properties_tests<CTS_TYPE, TestType>{}(CTS_TYPE_NAME);
  else
    for_type_vectors_marray<run_host_properties_tests, CTS_TYPE, TestType>(
        CTS_TYPE_NAME);
#else
  run_host_properties_tests<CTS_TYPE, TestType>{}(CTS_TYPE_NAME);
#endif  // SYCL_CTS_ENABLE_FULL_CONFORMANCE
});

}  // namespace host_accessor_properties_core
