/*******************************************************************************
//
//  SYCL 2020 Conformance Test Suite
//
//  Provides tests for local_accessor.
//
//  This test provides verifications that local_accessor can access the memory
//  shared among work-items. For generic types.
//
*******************************************************************************/

#include "../common/common.h"
#include "../common/disabled_for_test_case.h"

// clang-format off
#cmakedefine CTS_TYPE @CTS_TYPE@
#cmakedefine CTS_TYPE_NAME std::string("@CTS_TYPE_NAME@")
// clang-format on

// FIXME: re-enable when sycl::accessor is implemented
#if !SYCL_CTS_COMPILING_WITH_ADAPTIVECPP

#include "local_accessor_access_among_work_items.h"

using namespace local_accessor_access_among_work_items;
using namespace accessor_tests_common;
#endif

namespace local_accessor_access_among_work_items_core {

DISABLED_FOR_TEMPLATE_LIST_TEST_CASE(AdaptiveCpp)
(CTS_TYPE_NAME + " sycl::local_accessor access among work items.", "[accessor]",
 test_combinations)({
  auto queue = sycl_cts::util::get_cts_object::queue();
  if constexpr (std::is_same_v<std::remove_cv_t<CTS_TYPE>, sycl::half>) {
    if (!queue.get_device().has(sycl::aspect::fp16))
      SKIP(
          "Device does not support half precision floating point "
          "operations.");
  } else if (std::is_same_v<std::remove_cv_t<CTS_TYPE>, double>) {
    if (!queue.get_device().has(sycl::aspect::fp64))
      SKIP(
          "Device does not support double precision floating point "
          "operations.");
  }

#if SYCL_CTS_ENABLE_FULL_CONFORMANCE
  if constexpr (std::is_same_v<CTS_TYPE, user_struct>)
    run_local_accessor_access_among_work_items_tests<CTS_TYPE, TestType>{}(
        CTS_TYPE_NAME);
  else
    for_type_vectors_marray<run_local_accessor_access_among_work_items_tests,
                            CTS_TYPE, TestType>(CTS_TYPE_NAME);
#else
  run_local_accessor_access_among_work_items_tests<CTS_TYPE, TestType>{}(CTS_TYPE_NAME);
#endif  // SYCL_CTS_ENABLE_FULL_CONFORMANCE
});

}  // namespace local_accessor_access_among_work_items_core
