import random

typelist = ["bool", "char", "char16_t", "char32_t", "wchar_t", "short", "int", "long", "long long"]
for type in typelist:
    a1 = int(random.randint(1, 10))
    a2 = int(random.randint(1, 10))
    a3 = int(random.randint(1, 10))
    if type == "bool":
        b = int(1)
    else:
        b = int(random.randint(1, 10))
    print("DISABLED_FOR_TEMPLATE_TEST_CASE_SIG(AdaptiveCpp)\n(\"id supports various binary operators of the form `id OP ", type, "` and \"\n \"`", type, " OP id`\",\n \"[id]\", ((int D), D), 1, 2, 3)({", sep='')
    print("  const auto a = idh<D>::get(", a1, ", " , a2, ", ", a3, ");\n  const ", type, " b = ", b, ";", sep = '')
    print("")
    print("  CHECK(a + b == idh<D>::get(", a1+b, ", ", a2+b, ", ", a3+b, "));", sep = '')
    print("  CHECK(b + a == idh<D>::get(", b+a1, ", ", b+a2, ", ", b+a3, "));", sep = '')
    print("  CHECK(a - b == idh<D>::get(", a1-b, ", ", a2-b, ", ", a3-b, "));", sep = '')
    print("  CHECK(b - a == idh<D>::get(", b-a1, ", ", b-a2, ", ", b-a3, "));", sep = '')
    print("  CHECK(a * b == idh<D>::get(", a1*b, ", ", a2*b, ", ", a3*b, "));", sep = '')
    print("  CHECK(b * a == idh<D>::get(", b*a1, ", ", b*a2, ", ", b*a3, "));", sep = '')
    print("  CHECK(a / b == idh<D>::get(", a1//b, ", ", a2//b, ", ", a3//b, "));", sep = '')
    print("  CHECK(b / a == idh<D>::get(", b//a1, ", ", b//a2, ", ", b//a3, "));", sep = '')
    print("  CHECK(a % b == idh<D>::get(", a1%b, ", ", a2%b, ", ", a3%b, "));", sep = '')
    print("  CHECK(b % a == idh<D>::get(", b%a1, ", ", b%a2, ", ", b%a3, "));", sep = '')
    print("  CHECK(a << b == idh<D>::get(", a1<<b, ", ", a2<<b, ", ", a3<<b, "));", sep = '')
    print("  CHECK(b << a == idh<D>::get(", b<<a1, ", ", b<<a2, ", ", b<<a3, "));", sep = '')
    print("  CHECK(a >> b == idh<D>::get(", a1>>b, ", ", a2>>b, ", ", a3>>b, "));", sep = '')
    print("  CHECK(b >> a == idh<D>::get(", b>>a1, ", ", b>>a2, ", ", b>>a3, "));", sep = '')
    print("  CHECK((a & b) == idh<D>::get(", a1&b, ", ", a2&b, ", ", a3&b, "));", sep = '')
    print("  CHECK((b & a) == idh<D>::get(", b&a1, ", ", b&a2, ", ", b&a3, "));", sep = '')
    print("  CHECK((a | b) == idh<D>::get(", a1|b, ", ", a2|b, ", ", a3|b, "));", sep = '')
    print("  CHECK((b | a) == idh<D>::get(", b|a1, ", ", b|a2, ", ", b|a3, "));", sep = '')
    print("  CHECK((a ^ b) == idh<D>::get(", a1^b, ", ", a2^b, ", ", a3^b, "));", sep = '')
    print("  CHECK((b ^ a) == idh<D>::get(", b^a1, ", ", b^a2, ", ", b^a3, "));", sep = '')
    print("  CHECK((a && b) == idh<D>::get(", int(a1!=0 and b!=0), ", ", int(a2!=0 and b!=0), ", ", int(a3!=0 and b!=0), "));", sep = '')
    print("  CHECK((b && a) == idh<D>::get(", int(b!=0 and a1!=0), ", ", int(b!=0 and a2!=0), ", ", int(b!=0 and a3!=0), "));", sep = '')
    print("  CHECK((a || b) == idh<D>::get(", int(a1!=0 or b!=0), ", ", int(a2!=0 or b!=0), ", ", int(a3!=0 or b!=0), "));", sep = '')
    print("  CHECK((b || a) == idh<D>::get(", int(b!=0 or a1!=0), ", ", int(b!=0 or a2!=0), ", ", int(b!=0 or a3!=0), "));", sep = '')
    print("  CHECK((a < b) == idh<D>::get(", int(a1<b), ", ", int(a2<b), ", ", int(a3<b), "));", sep = '')
    print("  CHECK((b < a) == idh<D>::get(", int(b<a1), ", ", int(b<a2), ", ", int(b<a3), "));", sep = '')
    print("  CHECK((a > b) == idh<D>::get(", int(a1>b), ", ", int(a2>b), ", ", int(a3>b), "));", sep = '')
    print("  CHECK((b > a) == idh<D>::get(", int(b>a1), ", ", int(b>a2), ", ", int(b>a3), "));", sep = '')
    print("  CHECK((a <= b) == idh<D>::get(", int(a1<=b), ", ", int(a2<=b), ", ", int(a3<=b), "));", sep = '')
    print("  CHECK((b <= a) == idh<D>::get(", int(b<=a1), ", ", int(b<=a2), ", ", int(b<=a3), "));", sep = '')
    print("  CHECK((a >= b) == idh<D>::get(", int(a1>=b), ", ", int(a2>=b), ", ", int(a3>=b), "));", sep = '')
    print("  CHECK((b >= a) == idh<D>::get(", int(b>=a1), ", ", int(b>=a2), ", ", int(b>=a3), "));", sep = '')
    print("")
    print("  KCHECK(EVAL_D(a + b) == idh<D>::get(", a1+b, ", ", a2+b, ", ", a3+b, "));", sep = '')
    print("  KCHECK(EVAL_D(b + a) == idh<D>::get(", b+a1, ", ", b+a2, ", ", b+a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a - b) == idh<D>::get(", a1-b, ", ", a2-b, ", ", a3-b, "));", sep = '')
    print("  KCHECK(EVAL_D(b - a) == idh<D>::get(", b-a1, ", ", b-a2, ", ", b-a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a * b) == idh<D>::get(", a1*b, ", ", a2*b, ", ", a3*b, "));", sep = '')
    print("  KCHECK(EVAL_D(b * a) == idh<D>::get(", b*a1, ", ", b*a2, ", ", b*a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a / b) == idh<D>::get(", a1//b, ", ", a2//b, ", ", a3//b, "));", sep = '')
    print("  KCHECK(EVAL_D(b / a) == idh<D>::get(", b//a1, ", ", b//a2, ", ", b//a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a % b) == idh<D>::get(", a1%b, ", ", a2%b, ", ", a3%b, "));", sep = '')
    print("  KCHECK(EVAL_D(b % a) == idh<D>::get(", b%a1, ", ", b%a2, ", ", b%a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a << b) == idh<D>::get(", a1<<b, ", ", a2<<b, ", ", a3<<b, "));", sep = '')
    print("  KCHECK(EVAL_D(b << a) == idh<D>::get(", b<<a1, ", ", b<<a2, ", ", b<<a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a >> b) == idh<D>::get(", a1>>b, ", ", a2>>b, ", ", a3>>b, "));", sep = '')
    print("  KCHECK(EVAL_D(b >> a) == idh<D>::get(", b>>a1, ", ", b>>a2, ", ", b>>a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a & b) == idh<D>::get(", a1&b, ", ", a2&b, ", ", a3&b, "));", sep = '')
    print("  KCHECK(EVAL_D(b & a) == idh<D>::get(", b&a1, ", ", b&a2, ", ", b&a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a | b) == idh<D>::get(", a1|b, ", ", a2|b, ", ", a3|b, "));", sep = '')
    print("  KCHECK(EVAL_D(b | a) == idh<D>::get(", b|a1, ", ", b|a2, ", ", b|a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a ^ b) == idh<D>::get(", a1^b, ", ", a2^b, ", ", a3^b, "));", sep = '')
    print("  KCHECK(EVAL_D(b ^ a) == idh<D>::get(", b^a1, ", ", b^a2, ", ", b^a3, "));", sep = '')
    print("  KCHECK(EVAL_D(a && b) == idh<D>::get(", int(a1!=0 and b!=0), ", ", int(a2!=0 and b!=0), ", ", int(a3!=0 and b!=0), "));", sep = '')
    print("  KCHECK(EVAL_D(b && a) == idh<D>::get(", int(b!=0 and a1!=0), ", ", int(b!=0 and a2!=0), ", ", int(b!=0 and a3!=0), "));", sep = '')
    print("  KCHECK(EVAL_D(a || b) == idh<D>::get(", int(a1!=0 or b!=0), ", ", int(a2!=0 or b!=0), ", ", int(a3!=0 or b!=0), "));", sep = '')
    print("  KCHECK(EVAL_D(b || a) == idh<D>::get(", int(b!=0 or a1!=0), ", ", int(b!=0 or a2!=0), ", ", int(b!=0 or a3!=0), "));", sep = '')
    print("  KCHECK(EVAL_D(a < b) == idh<D>::get(", int(a1<b), ", ", int(a2<b), ", ", int(a3<b), "));", sep = '')
    print("  KCHECK(EVAL_D(b < a) == idh<D>::get(", int(b<a1), ", ", int(b<a2), ", ", int(b<a3), "));", sep = '')
    print("  KCHECK(EVAL_D(a > b) == idh<D>::get(", int(a1>b), ", ", int(a2>b), ", ", int(a3>b), "));", sep = '')
    print("  KCHECK(EVAL_D(b > a) == idh<D>::get(", int(b>a1), ", ", int(b>a2), ", ", int(b>a3), "));", sep = '')
    print("  KCHECK(EVAL_D(a <= b) == idh<D>::get(", int(a1<=b), ", ", int(a2<=b), ", ", int(a3<=b), "));", sep = '')
    print("  KCHECK(EVAL_D(b <= a) == idh<D>::get(", int(b<=a1), ", ", int(b<=a2), ", ", int(b<=a3), "));", sep = '')
    print("  KCHECK(EVAL_D(a >= b) == idh<D>::get(", int(a1>=b), ", ", int(a2>=b), ", ", int(a3>=b), "));", sep = '')
    print("  KCHECK(EVAL_D(b >= a) == idh<D>::get(", int(b>=a1), ", ", int(b>=a2), ", ", int(b>=a3), "));", sep = '')
    print("});")
    print("")