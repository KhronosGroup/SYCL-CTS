:sectnums:
:xrefstyle: short

= Test plan for atomic_ref

This is a test plan for the APIs described in SYCL 2020 section 4.15.3. Atomic references

== Testing scope

=== Device coverage

All of the tests described below are performed only on the default device that
is selected on the CTS command line.

== Type coverage

* `int`
* `unsigned int`
* `long`
* `unsigned long`
* `long long`
* `unsigned long long`

Implementation dependend types:
* `float`
* `double`
The member functions of the atomic_ref class may be emulated and may use a different floating-point environment to those defined by `info::device::single_fp_config` and `info::device::double_fp_config`.
Therefore, the floating-point atomics may use different rounding modes and may have different exception behavior.

== Tests

=== SYCL2020 interface

==== Members

For the following values as DefaultOrder parameter:

* `memory_order::relaxed`
Check the following:
`default_read_order` is `memory_order::relaxed`
`default_write_order` is `memory_order::relaxed`


* `memory_order::acq_rel`
Check the following:
`default_read_order` is `memory_order::acquire`
`default_write_order` is `memory_order::release`

* `memory_order::seq_cst`
Check the following:
`default_read_order` is `memory_order::seq_cst`
`default_write_order` is `memory_order::seq_cst`


==== Common constructors

For the following values as DefaultOrder parameter:

* `memory_order::relaxed`
* `memory_order::acq_rel`
* `memory_order::seq_cst`

For the following values as DefaultScope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

For the following values as Space parameter:

* `access::address_space::global_space`
* `access::address_space::local_space`
* `access::address_space::private_space`
* `access::address_space::generic_space`


Call constructors:

* `atomic_ref(T&)` and check if
* `atomic_ref(const atomic_ref&)`

==== Member functions


===== `bool is_lock_free()`

Check if the function exists and returns `true` or `false`

===== `void store(T operand,
    memory_order order = default_write_order,
    memory_scope scope = default_scope)`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::release`
* `memory_order::seq_cst`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if the function atomically stores `operand` to the object referenced by this atomic_ref.

===== `T operator=(T desired) const noexcept`

Same as `store(desired)`: Check if the function atomically stores `operand` to the object referenced by this atomic_ref.

===== `T load(
    memory_order order = default_read_order
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if the function atomically loads the value of `operand` referenced by this atomic_ref.

===== `operator T() const`

Equivalent to load(): Check if the function atomically loads the value of `operand` referenced by this atomic_ref.

===== `T exchange(T operand,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if atomically replaces the value of the object referenced by this atomic_ref with value operand and returns the original value of the referenced object. 

===== `bool compare_exchange_weak(T &expected, T desired,
    memory_order success,
    memory_order failure,
    memory_scope scope = default_scope) const`

For the following values as success and failure parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

For equal values: it attempts to replaces the value of the referenced object with the value of `desired`. This may not be checked since it is non-deterministic.

For uneual values: check if it assigns the original value of the referenced object to `expected`.

Also check if it returns `true` when the comparison operation and replacement operation were successful.

===== `bool compare_exchange_weak(T &expected, T desired,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

Same as above: Equivalent to `compare_exchange_weak(expected, desired, order, order, scope)`.

===== `bool compare_exchange_strong(T &expected, T desired,
    memory_order success,
    memory_order failure,
    memory_scope scope = default_scope) const`

For the following values as success and failure parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

For equal values: check if it replaces the value of the referenced object with the value of `desired`.

For uneual values: check if it assigns the original value of the referenced object to `expected`.

Also check if it returns `true` when the comparison operation was successful.

===== `bool compare_exchange_strong(T &expected, T desired,
    memory_order order =
    default_read_modify_write_order) const`

Same as above: Equivalent to `compare_exchange_strong(expected, desired, order, order, scope)`.

==== Additional member functions available on an object of type `atomic_ref<T>` for integral `T`

===== `T fetch_add(T operand,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`
* `memory_order::release`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if it atomically adds operand to the value of the object referenced by this atomic_ref and assigns the result to the value of the referenced object. 
Check if it returns the original value of the referenced object. 

===== `T operator+=(T operand) const`

Same as above: Equivalent to `fetch_add(operand) + operand`.

===== `T operator++(int) const`

Same as `fetch_add`: Equivalent to `fetch_add(1)`.

===== `T operator++() const`

Same as `fetch_add`: Equivalent to `fetch_add(1) + 1`.

===== `T fetch_sub(T operand,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`
* `memory_order::release`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if it atomically subtracts operand from the value of the object referenced by this atomic_ref and assigns the result to the value of the referenced object.
Check if it returns the original value of the referenced object.

===== `T operator-=(T operand) const`

Same as above: Equivalent to `fetch_sub(operand) - operand`.

===== `T operator--(int) const`

Same as `fetch_sub`: Equivalent to `fetch_sub(1)`.

===== `T operator--() const`

Same as `fetch_add`: Equivalent to fetch_sub(1) - 1.

===== `T fetch_and(T operand,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`
* `memory_order::release`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if it atomically performs a bitwise AND between operand and the value of the object referenced by this atomic_ref, and assigns the result to the value of the referenced object.
Check if it returns the original value of the referenced object.

===== `T operator&=(T operand) const`
	
Same as above: Equivalent to `fetch_and(operand) & operand`.

===== `T fetch_or(T operand,
    memory_order order = default_read_modify_write_order,
    memory_scope scope = default_scope) const`

For the following values as order parameter:

* `memory_order::relaxed`
* `memory_order::acquire`
* `memory_order::seq_cst`
* `memory_order::release`

For the following values as scope parameter:

* `memory_scope::work_item`
* `memory_scope::sub_group`
* `memory_scope::work_group`
* `memory_scope::device`
* `memory_scope::system`

And For 64-bit data types on devices that have `aspect::atomic64`.

Check if it atomically performs a bitwise OR between operand and the value of the object referenced by this atomic_ref, and assigns the result to the value of the referenced object.
Check if it returns the original value of the referenced object.

===== `T operator|=(T operand) const`

Same as above: Equivalent to `fetch_or(operand) | operand`.
