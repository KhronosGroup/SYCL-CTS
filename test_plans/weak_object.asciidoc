:sectnums:
:xrefstyle: short

= Test plan for weak object

This is a test plan for the APIs described in
https://github.com/intel/llvm/blob/sycl/sycl/doc/extensions/supported/sycl_ext_oneapi_weak_object.asciidoc[sycl_ext_oneapi_weak_object]

== Testing scope

=== Device coverage

All of the tests described below are performed only on the default device that
is selected on the CTS command line.

=== Feature test macro

All of the tests should use `#ifdef SYCL_EXT_ONEAPI_WEAK_OBJECT` so they can be skipped
if feature is not supported.

=== Type coverage
All of the tests for `weak_object` described below are performed using each of the following `typename SYCLObjT`:

* `buffer<int>`         +
* `accessor<int>`       +
* `host_accessor<int>`  +
* `local_accessor<int>` +
* `context`             +
* `event`               +
* `queue`               +
* `stream`

== Objects creation

All of the tests for `weak_object` described below using SYCL objects and empty or non-empty objects:

* SYCL objects created by using default constructors or passing sample data:

** `buffer<int>`
+
----
buffer<int> b{{1}}
----

** `accessor<int>`
+
----
buffer<int> b{{1}};
accessor a{b}
----

** `host_accessor<int>`
+
----
buffer<int> b{{1}};
host_accessor a{b}
----

** `local_accessor<int>`
+
----
queue q;
q.submit([&](handler &cgh) {
    local_accessor<int> a{{1}, cgh};
})
----

** `context`
+
----
context c;
----

** `event`
+
----
event e;
----

** `queue`
+
----
queue q;
----

** `stream`
+
----
queue q;
q.submit([&](handler &cgh) {
  stream s{1, 1, cgh};
})
----

* Empty `weak_object` created by using `constexpr weak_object()` constructor

* Non-empty `weak_object` created by using `weak_object(const SyclObject &SYCLObj)` constructor

== Tests

=== API tests

General checks for all of created `weak_object` called `w`. First initialize `ret` using `try_lock()`, then:

* If the weak_object was constructed with an underlying SYCL object `SyclObj`, check that:
** `std::is_same_v<decltype(w)::object_type, SYCLObjT>`.
** `ret.value() == SYCLObj`.
** `std::is_same_v<decltype(ret.value()), SYCLObjT>`
** Call `lock` and verify that the value it returns compares equal to `SyclObj`.
** Call `reset`, and then verify that `expired()` returns `false`.

* If the weak_object was constructed with no underlying SYCL object, check that:
** `ret.has_value() == false`
** Call `lock` and verify that it throws `errc::invalid` exception

=== Constructors

* Create SYCL object of type `SyclObjT`, call it `SyclObject`.
* Create temporary `weak_object` object from `SyclObject`, call it `WeakObjectOther`.
* Create empty weak object using `constexpr weak_object()` constructor, call it `w_empty`.
* Create `weak_object` using `weak_object(const SyclObject &SYCLObj)` constructor and passing `SyclObject`, call it 'w_obj'.
* Create `weak_object` using `weak_object(const weak_object &Other)` constructor and passing `WeakObjectOther`, call it 'w_copy'.
* Create `weak_object` using `weak_object(weak_object &&Other)` constructor and passing `std::move(WeakObjectOther)`, call it 'w_move'.

Perform tests described above in the "API" section.

=== Copy and move assignment operators

* Create SYCL object of type `SyclObjT`, call it `SyclObject`.
* Create temporary `weak_object` object from `SyclObject`, call it `WeakObjectOther`.
* Declare three uninitialized instances of `weak_object`, call them `w_obj`, `w_copy` and `w_move`.
* Assign `SyclObject` to `w_obj` using `weak_object &operator=(const SyclObject &SYCLObj)` operator.
* Assign `WeakObjectOther` to `w_copy` using `weak_object &operator=(const weak_object &Other)` operator.
* Assign `std::move(WeakObjectOther)` to `w_move` using `weak_object &operator=(weak_object &&Other)` operator.

Perform tests described above in the "API" section.

=== swap member function

Using the objects created in the "Constructors" section, do the following:

* Create an empty `weak_object` of the same type by using the default constructor.

* Call `swap` on that object, passing the object from the "Constructors" section.

* Perform tests described above in the "API" section.

=== Expiring

* Create local scope with `SYCLObjT` object and assign it to `weak_object` that is outside this scope. Check that `expired()` returns `false` now and `true` after `SYCLObjT` object was destroyed outside the scope.

* Check that `expired()` returns `bool` type using `std::is_same_v`.

=== owner_before and ext_oneap_owner_before

* Verify that `owner_before` compares equivalent for two weak objects that both refer to the same underlying SYCL object:
  ** Create a SYCL object of type `SyclObjT`. Call it `SyclObject`.
  ** Create a copy of `SyclObject` called `SyclObjectOther`.
  ** Create two weak_object objects from `SyclObject`. Call them `w1` and `w2`.
  ** Verify that `w1.owner_before(w2) == false` and `w2.owner_before(w1) == false`.
  ** Verify that `w1.owner_before(SyclObject) == false` and `w2.owner_before(SyclObject) == false`.
  ** Verify that `SyclObject.ext_oneapi_owner_before(w1) == false` and
  ** Verify that `SyclObject.ext_oneapi_owner_before(w2) == false`.
  ** Verify that `SyclObjectOther.ext_oneapi_owner_before(SyclObject) == false`.
  ** Verify that `SyclObject.ext_oneapi_owner_before(SyclObjectOther) == false`.

* Verify that `owner_before` compares equivalent for two weak objects that are both empty:
  ** Create a SYCL object of type `SyclObjT`. Call it `SyclObject`.
  ** Create two empty weak_object objects by using the default constructor. Call them `w1` and `w2`.
  ** Verify that `w1.owner_before(w2) == false` and `w2.owner_before(w1) == false`.

* Verify that `owner_before` has some order for two weak object that refer to different underlying SYCL objects:
  ** Create two SYCL objects of type `SyclObjT`. Call them `SyclObject1` and `SyclObject2`.
  ** Create a `weak_object` object from `SyclObject1` and another from `SyclObject2`. Call them `w1` and `w2`.
  ** Verify that exactly one of the following is `true` for weak objects:
    *** `w1.owner_before(w2) == true && w2.owner_before(w1) == false`, or
    *** `w1.owner_before(w2) == false && w2.owner_before(w1) == true`.
  ** Verify that exactly one of the following is `true` for SYCL objects:
    *** `SyclObject1.ext_oneapi_owner_before(w2) == true && SyclObject2.ext_oneapi_owner_before(w1) == false`, or
    *** `SyclObject1.ext_oneapi_owner_before(w2) == false && SyclObject2.ext_oneapi_owner_before(w1) == true`.
  ** Verify that `w1.owner_before(SyclObject2) == w1.owner_before(w2)`.
  ** Verify that `w2.owner_before(SyclObject1) == w2.owner_before(w1)`.
  ** Verify that `SyclObject1.ext_oneapi_owner_before(SyclObject2) == SyclObject1.ext_oneapi_owner_before(w2)`.
  ** Verify that `SyclObject2.ext_oneapi_owner_before(SyclObject1) == SyclObject2.ext_oneapi_owner_before(w1)`.

=== owner_less

Similar to previous section.

* Verify that `owner_less` compares equivalent for two weak objects that both refer to the same underlying SYCL object:
  ** Create a SYCL object of type `SyclObjT`. Call it `SyclObject`.
  ** Create a copy of `SyclObject` called `SyclObjectOther`.
  ** Create two weak_object objects from `SyclObject`. Call them `w1` and `w2`.
  ** Verify that:
    *** `ext::oneapi::owner_less(w1, w2) == false`.
    *** `ext::oneapi::owner_less(w2, w1) == false`.
    *** `ext::oneapi::owner_less(w1, SyclObject) == false`.
    *** `ext::oneapi::owner_less(SyclObject, w1) == false`.
    *** `ext::oneapi::owner_less(w2, SyclObject) == false`.
    *** `ext::oneapi::owner_less(SyclObject, w2) == false`.
    *** `ext::oneapi::owner_less(SyclObject, SyclObjectOther) == false`.
    *** `ext::oneapi::owner_less(SyclObjectOther, SyclObject) == false`.

* Verify that `owner_less` compares equivalent for two weak objects that are both empty:
  ** Create a SYCL object of type `SyclObjT`. Call it `SyclObject`.
  ** Create two empty weak_object objects by using the default constructor. Call them `w1` and `w2`.
  ** Verify that `ext::oneapi::owner_less(w1, w2) == false`.
  ** Verify that `ext::oneapi::owner_less(w2, w1) == false`.

* Verify that `owner_less` has some order for two weak object that refer to different underlying SYCL objects:
  ** Create two SYCL objects of type `SyclObjT`. Call them `SyclObject1` and `SyclObject2`.
  ** Create a `weak_object` object from `SyclObject1` and another from `SyclObject2`. Call them `w1` and `w2`.
  ** Verify that exactly one of the following is `true` for weak objects:
    *** `ext::oneapi::owner_less(w1, w2) == true && ext::oneapi::owner_less(w2, w1) == false` or
    *** `ext::oneapi::owner_less(w1, w2) == false && ext::oneapi::owner_less(w2, w1) == true`.
  ** Verify that `ext::oneapi::owner_less(w1, SyclObject2) == ext::oneapi::owner_less(w1, w2)`.
  ** Verify that `ext::oneapi::owner_less(w2, SyclObject1) == ext::oneapi::owner_less(w2, w1)`.
  ** Verify that `ext::oneapi::owner_less(SyclObject1, SyclObject2) == ext::oneapi::owner_less(w1, w2)`.
  ** Verify that `ext::oneapi::owner_less(SyclObject2, SyclObject1) == ext::oneapi::owner_less(w2, w1)`.
